============================= test session starts ==============================
platform linux -- Python 3.6.8, pytest-5.3.2, py-1.8.1, pluggy-0.13.1 -- /home/stfriese/.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/bin/python3.6m
cachedir: .pytest_cache
rootdir: /home/stfriese/pypyr-scheduler, inifile: tox.ini, testpaths: tests
plugins: cov-2.8.1
collecting ... collected 58 items

tests/api/test_execution.py::TestJobExecution::test_job_execution_status ERROR [  1%]
tests/api/test_execution.py::TestJobExecution::test_job_execution_non_existing[GET] ERROR [  3%]
tests/api/test_execution.py::TestJobExecution::test_job_execution_non_existing[POST] ERROR [  5%]
tests/api/test_execution.py::TestJobExecution::test_job_execution_non_existing[DELETE] ERROR [  6%]
tests/api/test_execution.py::TestJobExecution::test_stop_job ERROR       [  8%]
tests/api/test_job_management.py::TestJobManagement::test_http_method_not_allowed_on_list_endpoint[POST] ERROR [ 10%]
tests/api/test_job_management.py::TestJobManagement::test_http_method_not_allowed_on_list_endpoint[PUT] ERROR [ 12%]
tests/api/test_job_management.py::TestJobManagement::test_http_method_not_allowed_on_list_endpoint[DELETE] ERROR [ 13%]
tests/api/test_job_management.py::TestJobManagement::test_job_create ERROR [ 15%]
tests/api/test_job_management.py::TestJobManagement::test_job_create_with_illegal_interval ERROR [ 17%]
tests/api/test_job_management.py::TestJobManagement::test_job_create_nonexistent_pipeline ERROR [ 18%]
tests/api/test_job_management.py::TestJobManagement::test_job_delete_by_job_id ERROR [ 20%]
tests/api/test_job_management.py::TestJobManagement::test_job_delete_by_job_name ERROR [ 22%]
tests/api/test_job_management.py::TestJobManagement::test_job_delete_nonexistent ERROR [ 24%]
tests/api/test_job_management.py::TestJobManagement::test_job_get_one ERROR [ 25%]
tests/api/test_job_management.py::TestJobManagement::test_job_get_all ERROR [ 27%]
tests/api/test_job_management.py::TestJobManagement::test_job_change_interval ERROR [ 29%]
tests/api/test_job_management.py::TestJobManagement::test_job_change_name ERROR [ 31%]
tests/api/test_job_management.py::TestJobManagement::test_job_change_name_non_existant ERROR [ 32%]
tests/api/test_pipelines.py::TestPipelines::test_http_method_not_allowed_on_list_endpoint[POST] ERROR [ 34%]
tests/api/test_pipelines.py::TestPipelines::test_http_method_not_allowed_on_list_endpoint[PUT] ERROR [ 36%]
tests/api/test_pipelines.py::TestPipelines::test_http_method_not_allowed_on_list_endpoint[DELETE] ERROR [ 37%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_upload_contents_match ERROR [ 39%]
tests/api/test_pipelines.py::TestPipelines::test_malicious_upload[/etc/passwd] ERROR [ 41%]
tests/api/test_pipelines.py::TestPipelines::test_malicious_upload[../../bla.yaml] ERROR [ 43%]
tests/api/test_pipelines.py::TestPipelines::test_malicious_upload[C:/Programme/test.yaml] ERROR [ 44%]
tests/api/test_pipelines.py::TestPipelines::test_malicious_upload[%C3%A9%C3%A9%C3%A9] ERROR [ 46%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_replace_malicious[/etc/passwd] ERROR [ 48%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_replace_malicious[../../bla.yaml] ERROR [ 50%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_replace_malicious[C:/Programme/test.yaml] ERROR [ 51%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_replace_malicious[%C3%A9%C3%A9%C3%A9] ERROR [ 53%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_replace_missing_target ERROR [ 55%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_replace_with_other_file ERROR [ 56%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_delete ERROR   [ 58%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_delete_malicious_filenames[/etc/passwd] ERROR [ 60%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_delete_malicious_filenames[../../bla.yaml] ERROR [ 62%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_delete_malicious_filenames[C:/Programme/test.yaml] ERROR [ 63%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_delete_malicious_filenames[%C3%A9%C3%A9%C3%A9] ERROR [ 65%]
tests/api/test_pipelines.py::TestPipelines::test_pipeline_download ERROR [ 67%]
tests/api/test_pipelines.py::TestPipelines::test_list_pipelines ERROR    [ 68%]
tests/api/test_pipelines.py::TestPipelines::test_list_pipelines_no_upload_folder ERROR [ 70%]
tests/api/test_status.py::TestJobManagement::test_http_method_not_allowed_on_status_endpoint[POST] ERROR [ 72%]
tests/api/test_status.py::TestJobManagement::test_http_method_not_allowed_on_status_endpoint[PUT] ERROR [ 74%]
tests/api/test_status.py::TestJobManagement::test_http_method_not_allowed_on_status_endpoint[DELETE] ERROR [ 75%]
tests/api/test_status.py::TestJobManagement::test_status ERROR           [ 77%]
tests/cli/test_command_line.py::TestCommandline::test_parser PASSED      [ 79%]
tests/cli/test_command_line.py::TestCommandline::test_show_config[config] PASSED [ 81%]
tests/cli/test_command_line.py::TestCommandline::test_show_config[logging] PASSED [ 82%]
tests/cli/test_command_line.py::TestCommandline::test_show_config[pipelines] PASSED [ 84%]
tests/cli/test_command_line.py::TestCommandline::test_show_config[flask] PASSED [ 86%]
tests/cli/test_command_line.py::TestCommandline::test_show_config_json[config] PASSED [ 87%]
tests/cli/test_command_line.py::TestCommandline::test_show_config_json[logging] PASSED [ 89%]
tests/cli/test_command_line.py::TestCommandline::test_show_config_json[pipelines] PASSED [ 91%]
tests/cli/test_command_line.py::TestCommandline::test_show_config_json[flask] PASSED [ 93%]
tests/cli/test_command_line.py::TestCommandline::test_show_help PASSED   [ 94%]
tests/cli/test_command_line.py::TestCommandline::test_no_log_dir FAILED  [ 96%]
tests/cli/test_command_line.py::TestCommandline::test_no_ini_file PASSED [ 98%]
tests/cli/test_command_line.py::TestCommandline::test_no_scheduler_config PASSED [100%]

==================================== ERRORS ====================================
_________ ERROR at setup of TestJobExecution.test_job_execution_status _________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
------------------------------ Captured log setup ------------------------------
INFO     pyrsched.import:app.py:166 importing config from ../tests/testdata/logging_config_test.py
INFO     pyrsched.import:app.py:174 /home/stfriese/pypyr-scheduler/pyrsched/../tests/testdata not in sys.path, adding it
___ ERROR at setup of TestJobExecution.test_job_execution_non_existing[GET] ____

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
___ ERROR at setup of TestJobExecution.test_job_execution_non_existing[POST] ___

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
__ ERROR at setup of TestJobExecution.test_job_execution_non_existing[DELETE] __

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_______________ ERROR at setup of TestJobExecution.test_stop_job _______________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestJobManagement.test_http_method_not_allowed_on_list_endpoint[POST] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestJobManagement.test_http_method_not_allowed_on_list_endpoint[PUT] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestJobManagement.test_http_method_not_allowed_on_list_endpoint[DELETE] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____________ ERROR at setup of TestJobManagement.test_job_create ______________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
__ ERROR at setup of TestJobManagement.test_job_create_with_illegal_interval ___

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
___ ERROR at setup of TestJobManagement.test_job_create_nonexistent_pipeline ___

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
________ ERROR at setup of TestJobManagement.test_job_delete_by_job_id _________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_______ ERROR at setup of TestJobManagement.test_job_delete_by_job_name ________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_______ ERROR at setup of TestJobManagement.test_job_delete_nonexistent ________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____________ ERROR at setup of TestJobManagement.test_job_get_one _____________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____________ ERROR at setup of TestJobManagement.test_job_get_all _____________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_________ ERROR at setup of TestJobManagement.test_job_change_interval _________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
___________ ERROR at setup of TestJobManagement.test_job_change_name ___________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
____ ERROR at setup of TestJobManagement.test_job_change_name_non_existant _____

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_http_method_not_allowed_on_list_endpoint[POST] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_http_method_not_allowed_on_list_endpoint[PUT] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_http_method_not_allowed_on_list_endpoint[DELETE] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____ ERROR at setup of TestPipelines.test_pipeline_upload_contents_match ______

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
______ ERROR at setup of TestPipelines.test_malicious_upload[/etc/passwd] ______

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
____ ERROR at setup of TestPipelines.test_malicious_upload[../../bla.yaml] _____

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_malicious_upload[C:/Programme/test.yaml] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
__ ERROR at setup of TestPipelines.test_malicious_upload[%C3%A9%C3%A9%C3%A9] ___

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_replace_malicious[/etc/passwd] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_replace_malicious[../../bla.yaml] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_replace_malicious[C:/Programme/test.yaml] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_replace_malicious[%C3%A9%C3%A9%C3%A9] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____ ERROR at setup of TestPipelines.test_pipeline_replace_missing_target _____

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
____ ERROR at setup of TestPipelines.test_pipeline_replace_with_other_file _____

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____________ ERROR at setup of TestPipelines.test_pipeline_delete _____________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_delete_malicious_filenames[/etc/passwd] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_delete_malicious_filenames[../../bla.yaml] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_delete_malicious_filenames[C:/Programme/test.yaml] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestPipelines.test_pipeline_delete_malicious_filenames[%C3%A9%C3%A9%C3%A9] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
____________ ERROR at setup of TestPipelines.test_pipeline_download ____________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____________ ERROR at setup of TestPipelines.test_list_pipelines ______________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_____ ERROR at setup of TestPipelines.test_list_pipelines_no_upload_folder _____

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestJobManagement.test_http_method_not_allowed_on_status_endpoint[POST] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestJobManagement.test_http_method_not_allowed_on_status_endpoint[PUT] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_ ERROR at setup of TestJobManagement.test_http_method_not_allowed_on_status_endpoint[DELETE] _

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
_______________ ERROR at setup of TestJobManagement.test_status ________________

    @pytest.yield_fixture(scope="function")
    def app():
        path = Path(os.path.abspath(__file__)).parent
        config_file = path / "testdata" / "pyrsched.test.ini"
    
>       _app = create_app(config_file.resolve())

tests/conftest.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError
=================================== FAILURES ===================================
_______________________ TestCommandline.test_no_log_dir ________________________

self = <test_command_line.TestCommandline object at 0x7f6e7ea9c198>

    def test_no_log_dir(self):
        path = Path(os.path.abspath(__file__)).parent.parent
        config_file = path / 'testdata/pyrsched.test_nonexistent_logpath.ini'
>       app = create_app(config_file.resolve())

tests/cli/test_command_line.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pyrsched/app.py:147: in create_app
    _app.app.scheduler = rpyc.connect('localhost', 12345)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/utils/factory.py:98: in connect
    s = SocketStream.connect(host, port, ipv6=ipv6, keepalive=keepalive)
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:172: in connect
    return cls(cls._connect(host, port, **kwargs))
../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/core/stream.py:124: in _connect
    s = socket_backoff_connect(family, socktype, proto, sockaddr, timeout, attempts)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

family = <AddressFamily.AF_INET: 2>, socktype = <SocketKind.SOCK_STREAM: 1>
proto = 6, addr = ('127.0.0.1', 12345), timeout = 3, attempts = 6

    def socket_backoff_connect(family, socktype, proto, addr, timeout, attempts):
        """connect will backoff if the response is not ready for a pseudo random number greater than zero and less than
            51e-6, 153e-6, 358e-6, 768e-6, 1587e-6, 3225e-6, 6502e-6, 13056e-6, 26163e-6, 52377e-6
        this should help avoid congestion.
        """
        sock = socket.socket(family, socktype, proto)
        collision = 0
        connecting = True
        while connecting:
            collision += 1
            try:
                sock.settimeout(timeout)
>               sock.connect(addr)
E               ConnectionRefusedError: [Errno 111] Connection refused

../.local/share/virtualenvs/pypyr-scheduler-PMuiVrtt/lib/python3.6/site-packages/rpyc/lib/__init__.py:131: ConnectionRefusedError

----------- coverage: platform linux, python 3.6.8-final-0 -----------
Name                                Stmts   Miss  Cover   Missing
-----------------------------------------------------------------
pyrsched/__init__.py                    1      0   100%
pyrsched/__main__.py                   40      0   100%
pyrsched/api/__init__.py                0      0   100%
pyrsched/api/jobs.py                   51     51     0%   1-101
pyrsched/api/pipelines.py              54     54     0%   1-79
pyrsched/api/scheduler.py              23     23     0%   1-30
pyrsched/api/status.py                  7      7     0%   1-11
pyrsched/app.py                       104     11    89%   134-135, 153-162
pyrsched/conf/logging_config.py         1      0   100%
pyrsched/conf/scheduler_config.py       1      0   100%
pyrsched/server.py                     43     27    37%   19, 26, 29, 32, 35, 38, 41, 44, 47, 50-59, 62-71
pyrsched/utils.py                      35     23    34%   14-17, 21-23, 33-41, 57-76
-----------------------------------------------------------------
TOTAL                                 360    196    46%
Coverage XML written to file coverage.xml

=================== 1 failed, 12 passed, 45 errors in 4.29s ====================
